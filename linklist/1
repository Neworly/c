








#include <stdio.h>
#include <stdlib.h>

typedef char* cstring;

typedef struct node_t {
  struct node_t *prev;
  struct node_t *next;
  cstring value;
} Node;

typedef struct {
  struct content_t {
    Node *(*others);
    struct body_t {
      Node *head;
      Node *tail;
    } base;
  } content;

  size_t length;
} Metadata;

#define ASSERT(expr, msg) if (expr) (printf(msg), exit(0))
#define DANGER_FILL_DATA "attempt to fill data to `NULL`"

void update_this_node (Node *this, cstring value, struct node_t *prev, struct node_t *next)
{
  this->prev = prev;
  this->next = next;
  this->value = value;
}

void node_fill_data (Node *this, cstring value, struct node_t *prev, struct node_t *next)
{
  ASSERT(this == NULL, DANGER_FILL_DATA);
  update_this_node(this, value, prev, next);
}

Metadata link_sample ()
{
  Node *base = malloc(sizeof(Node));
  node_fill_data(base, NULL, NULL, NULL);

  Node *(*others) = malloc(1 * sizeof(void*));
  others[0] = base;

  return (Metadata)
  {
    .content = {
      .base = (struct body_t) {
        .head = base,
        .tail = NULL,
      },
      .others = others,
    }, .length = 1
  };
}

Node *node_newborn (cstring value)
{
  Node *it = malloc(sizeof(Node));
  update_this_node(it, value, NULL, NULL);
  return it;
}

void attach_node (Node *to, Node *it)
{
  Node *prev = to;
  to->next = it;
  it->prev = prev;
}

void push_linklist_node (Metadata link, Node *it)
{
  struct body_t base = link.content.base;
  attach_node(base.tail, it);
  base.tail = base.tail->next;
}

cstring node_value (Node *this)
{
  return this->value;
}

#define JOIN_HEADTAIL attach_node(link.content.base.head, link.content.base.tail)

int main (void)
{
  Metadata link = link_sample();
  JOIN_HEADTAIL;

  push_linklist_node(link, node_newborn("Hello"));
  printf("%s", link.content.base.tail->value);

  return 0;
}
